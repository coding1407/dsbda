# -*- coding: utf-8 -*-
"""F_GRPA02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vtf9QfZygtc4wXXjqaxAAlxJuwZxw_eo

# Group A
## Assignment 2

Data Wrangling II 

Create an "Academic performance" dataset of students and perform the following operations using python.
1. Deal with missing values and inconsistencies if any.
2. Deal with outliers if any.
3. Apply data transformations on at least one of the variables.

### Import all the required Python Libraries.
"""

import pandas as pd
import numpy as np

"""### Load the Dataset into pandas dataframe. """

df = pd.read_csv("StudentsPerformance.csv")

df.head()

df.shape    #its attribute not function

df.info()

df.describe() #statistict info about numrical value

"""## Data Preprocessing

####  Scan all variables for missing values and inconsistencies. If there are missing values and/or inconsistencies, use any of the suitable techniques to deal with them.
"""

df.isnull()  #shows in T, F

df.isnull().sum()   # colm -> nullValues

df['math score'].fillna(df['math score'].mean())       # filling missing value

df['math score'].fillna(df['math score'].mean(), inplace=True)  #change permenant

df['reading score'].fillna(df['reading score'].median(), inplace=True)

df['writing score'].fillna(df['writing score'].std(), inplace=True)

df.isnull().sum()

df['gender'].value_counts()    # frequency cnt

df['gender'].fillna('female', inplace=True)    # female is mode(highest frequency) so we replace missing gender with female

df.isnull().sum()

df['race/ethnicity'].isnull()

df[df['race/ethnicity'].isnull()]    # return rows where isnull() is null

df.iloc[[40,41,42]]    # fencing index

df['race/ethnicity'].fillna(method='bfill', inplace=True)

df.iloc[40:43]   # slicing

df.isnull().sum()

df['parental level of education'].fillna(method='pad', inplace=True)

df['lunch'].fillna(method='ffill', inplace=True)

df['test preparation course'].fillna(method='backfill', inplace=True)

df.isnull().sum()

"""#### Scan all numeric variables for outliers. If there are outliers, use any of the suitable techniques to deal with them."""

df.boxplot()

Q1 = df['math score'].quantile(0.25)
Q3 = df['math score'].quantile(0.75)

IQR = Q3 - Q1                   # Formula
upper = Q3 + (IQR*1.5)
lower = Q1 - (IQR*1.5)

np.clip(df['math score'], lower, upper, inplace=True)
# df['maths score']=np.clip(df['math score'], lower, upper)    # replace value upper to graph with upperWick and lowerWick with lower

df.boxplot()

Q1 = df['reading score'].quantile(0.25)
Q3 = df['reading score'].quantile(0.75)

IQR = Q3 - Q1                   # Formula
upper = Q3 + (IQR*1.5)
lower = Q1 - (IQR*1.5)
np.clip(df['reading score'], lower, upper, inplace=True)

Q1 = df['writing score'].quantile(0.25)
Q3 = df['writing score'].quantile(0.75)

IQR = Q3 - Q1                   # Formula
upper = Q3 + (IQR*1.5)
lower = Q1 - (IQR*1.5)
np.clip(df['writing score'], lower, upper, inplace=True)

df.boxplot()

# def outlier_treatment(col):
#   Q1 = df['col'].quantile(0.25)
#   Q3 = df['col'].quantile(0.75)

#   IQR = Q3 - Q1                   # Formula
#   upper = Q3 + (IQR*1.5)
#   lower = Q1 - (IQR*1.5)

#   df['col_list']=np.clip(df['col'], lower, upper, inplace=True)

"""#### Apply data transformations on at least one of the variables. The purpose of this transformation should be one of the following reasons: to change the scale for better understanding of the variable, to convert a non-linear relation into a linear one, or to decrease the skewness and convert the distribution into a normal distribution."""

import seaborn as sns

df['math score']

sns.kdeplot(df['math score'])

df['math score'].skew()

sns.kdeplot(df['writing score'])

df['writing score'].skew()

sns.kdeplot(df['reading score'])

df['reading score'].skew()

from sklearn.preprocessing import MinMaxScaler,StandardScaler

Scaler = StandardScaler()

Scaler.fit(df[['math score']])

df['math_score_Scaler']=Scaler.transform(df[['math score']])

df.head()

Scaler = MinMaxScaler()

Scaler.fit(df[['reading score']])

df['reading_score_Scaler']=Scaler.transform(df[['reading score']])

df.head()

df['math score'].mean()

df['math score'].std()