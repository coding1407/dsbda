# -*- coding: utf-8 -*-
"""F_GRPA6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r16boRV4dXOwLEH5Fki_mwwkD5ifRqZu

Data Analytics III
1. Implement Simple Na√Øve Bayes classification algorithm using Python/R on iris.csv 
dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, 
Recall on the given dataset.
"""

import pandas as pd
import numpy as np
import seaborn as sns

df=sns.load_dataset("iris")

df.head()

df.info()

df.describe()

df.shape

df.isnull().sum()

df['species'].value_counts()

df['species'].replace(['setosa','versicolor','virginica'],[0,1,2],inplace=True)

df.info()

df.describe()

"""#EDA"""

sns.boxplot(df)

"""#Define Outlier Treatment IQR(df,col):
q1=
q3=
iqr=
lower=
upper=
np.clip(4 parameters)
"""

def outlier_treatment(df,col):
  q1=df[col].quantile(0.25)
  q3=df[col].quantile(0.75)
  iqr=q3-q1
  lower=q1-(1.5*iqr)
  upper=q3+(1.5*iqr)
  np.clip(df[col],lower,upper,inplace=True)

outlier_treatment(df,'sepal_width')

sns.boxplot(df)

sns.pairplot(df)

sns.kdeplot(df)

"""#Building Navie_Bayes classification Model


1st Step while building the model *

*setting the values of x= independent Values*
*                      y= Dependent Values*
#Steps:
*1st Train Model
2nd Test Model
"""

x=df.iloc[:,:-1]
y=df.iloc[:,-1]

x

y

"""From Sklearn.Model_Selection"""

from sklearn.model_selection import train_test_split

"""#2nd Step
#Splitting the Dataset into Training and Testing Sets
*X_train Y_train

X_test  Y_test*


"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2,random_state=1)

x_train.shape

y_train.shape

x_test.shape

y_test.shape

"""Actual implementation step
#Step 3 : Create an instance oF Navie bayes Classifier
"""

from sklearn.naive_bayes import GaussianNB

classifier=GaussianNB()

"""#Step 4: Train this Model"""

classifier.fit(x_train,y_train)

"""#Step 5 : Test this Model"""

y_prediction=classifier.predict(x_test)

y_prediction

"""#Step 6: Evaluating the Model

import from matrix library

accuracy_score

confusion_score

precision_score

recall_score

"""

from sklearn.metrics import confusion_matrix,accuracy_score,precision_score,recall_score

confusion_matrix(y_test,y_prediction)

accuracy_score(y_test,y_prediction)

recall_score(y_test,y_prediction,average=None)

precision_score(y_test,y_prediction,average=None)

"""Accuracy = (TP+TN)/(TP+TN+FP+FN)

Precision Score = TP/(TP+FP)

Recall Score = TP/(TP+FN)
"""