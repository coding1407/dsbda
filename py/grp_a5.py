# -*- coding: utf-8 -*-
"""GRP_A5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_LbYC-vJI4HEuIZqJY1PRWL6LBrOLUDS

1 Assignment 05 

1.1 Data Analytics II 

1. Implement logistic regression using Python/R to perform 
classification on So cial_Network_Ads.csv dataset. 

2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on the given dataset.

1.1.1 Five Basic Operations
"""

import numpy as np 
import pandas as pd 
import seaborn as sns 
import warnings

warnings.filterwarnings('ignore') # It removes the Warning messages form␣ ,→the outputs

df = pd.read_csv('Social_Network_Ads.csv')

df.head(10)

df.shape

df.describe()

df.info()

df.isnull().sum()

"""1.1.2 Gender Catgories Change """

df['Gender'].value_counts()

df['Gender'].replace(['Female', 'Male'], [0, 1], inplace = True)

df.head(10)

df.info()

"""1.1.3 Perform EDA (Exploratory Data Analysis) """

import matplotlib.pyplot as plt

for i in df.columns: 
  plt.figure(figsize = (8, 4)) 
  sns.boxplot(x = i, data = df) 
  plt.show()

df['User ID'].value_counts() 
 # Droping unique valeues

df.drop(['User ID'], axis = 1, inplace = True)

sns.kdeplot(x = 'Age', data = df) 
plt.show()

sns.kdeplot(x = 'EstimatedSalary', data = df) 
plt.show()

df['EstimatedSalary'].skew() # Normally Distributed

df['Age'].skew() # Normally Distributed

sns.countplot(x = 'Gender', data = df)

sns.countplot(x = 'Purchased', data = df)

"""1.1.4 Build Logistic Regression Model """

X = df.iloc[ : , : -1] 
 y = df.iloc[ : , -1]

X

y

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20,random_state = 0)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

"""1.1.6 Scaling of the dataset """

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

sns.kdeplot(X_train)

sns.kdeplot(X_test)

"""1.1.7 Create Logistic Regression Object """

from sklearn.linear_model import LogisticRegression

LogReg = LogisticRegression()

"""1.1.8 Train the model """

LogReg.fit(X_train, y_train)

LogisticRegression()

"""1.1.9 Test the model"""

y_predict = LogReg.predict(X_test)

y_predict

"""1.1.10 Evaluate the model """

from sklearn.metrics import (confusion_matrix, accuracy_score, precision_score,
recall_score)

confusion_matrix(y_test, y_predict)

accuracy_score(y_test, y_predict)

precision_score(y_test, y_predict)

recall_score(y_test, y_predict)

